use simple_metrics::enable_simple_recorder;
use tokio::time::Duration;

use crate::{
    helpers::synthetic_peers::{SyntheticNode, SyntheticNodeConfig},
    protocol::{
        message::{filter::MessageFilter, Message},
        payload::Nonce,
    },
    setup::node::{Action, Node},
    tests::{
        performance::{duration_as_ms, RequestStats, RequestsTable},
        simple_metrics,
    },
};

#[tokio::test(flavor = "multi_thread", worker_threads = 8)]
async fn ping_pong_latency() {
    // ZG-PERFORMANCE-001, Ping-Pong latency
    //
    // The node behaves as expected under load from other peers.
    //
    // We test the overall performance of a node's Ping-Pong latency.
    //
    // Note: This test does not assert any requirements, but requires manual inspection
    //       of the results table. This is because the results will rely on the machine
    //       running the test.
    //
    // ZCashd: appears to perform well.
    //
    // Zebra: Starts dropping connections from 300 peers onwards.
    //
    // Example test result (with percentile latencies):
    //  *NOTE* run with `cargo test --release tests::performance::ping::ping_pong_latency -- --nocapture`
    //
    //  ZCashd
    //
    // ┌───────┬──────────┬──────────┬──────────┬──────────────┬──────────┬──────────┬──────────┬──────────┬──────────┬──────────┬────────────┐
    // │ peers │ requests │ min (ms) │ max (ms) │ std dev (ms) │ 10% (ms) │ 50% (ms) │ 75% (ms) │ 90% (ms) │ 99% (ms) │ time (s) │ requests/s │
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │      1│      1000│         0│       100│             4│         0│         0│         0│         0│         0│      0.25│     3937.31│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     10│      1000│         0│       100│             6│         0│         0│         0│         0│        50│      1.10│     9066.24│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     20│      1000│         0│       101│             6│         0│         0│         0│         1│        51│      1.56│    12844.44│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     30│      1000│         0│       102│             7│         1│         1│         1│         1│        51│      2.18│    13749.27│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     40│      1000│         0│       103│             8│         1│         1│         1│         1│         2│      2.36│    16914.39│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     50│      1000│         0│       102│             7│         1│         2│         2│         2│         3│      2.75│    18167.45│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     60│      1000│         0│        50│             2│         2│         2│         2│         2│         3│      2.69│    22333.95│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     70│      1000│         0│       107│             4│         2│         3│         3│         3│         4│      3.37│    20782.29│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     80│      1000│         0│       104│             5│         3│         3│         3│         3│         4│      3.71│    21540.66│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     90│      1000│         0│       104│             5│         3│         4│         4│         4│         7│      4.46│    20167.67│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    100│      1000│         0│       105│             4│         3│         4│         4│         4│         7│      4.66│    21436.89│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    200│      1000│         0│       110│             5│         8│         9│        11│        12│        18│     10.49│    19071.93│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    300│      1000│         0│        63│             3│        12│        13│        14│        16│        22│     14.16│    21188.57│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    500│      1000│         0│       112│             4│        18│        20│        21│        22│        30│     20.91│    23913.36│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    750│      1000│         0│       128│             4│        28│        30│        31│        32│        42│     30.93│    24248.40│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    800│      1000│         0│       101│             4│        28│        31│        33│        34│        39│     31.94│    25047.31│
    // └───────┴──────────┴──────────┴──────────┴──────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴────────────┘
    //
    //  zebra
    // ┌───────┬──────────┬──────────┬──────────┬──────────────┬──────────┬──────────┬──────────┬──────────┬──────────┬──────────┬────────────┐
    // │ peers │ requests │ min (ms) │ max (ms) │ std dev (ms) │ 10% (ms) │ 50% (ms) │ 75% (ms) │ 90% (ms) │ 99% (ms) │ time (s) │ requests/s │
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │      1│      1000│         0│         2│             1│         0│         0│         0│         0│         1│      0.88│     1142.40│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     10│      1000│         0│        41│             1│         1│         1│         1│         1│         2│      1.27│     7888.55│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     20│      1000│         0│       192│             7│         1│         1│         1│         2│        19│      2.38│     8412.35│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     30│      1000│         0│       153│            10│         1│         1│         1│         2│        58│      3.47│     8653.36│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     40│      1000│         0│       276│            16│         1│         1│         1│         2│        82│      4.58│     8734.40│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     50│      1000│         0│       407│            22│         1│         1│         1│         2│       124│      5.60│     8922.02│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     60│      1000│         0│       518│            29│         1│         1│         1│         1│       165│      6.63│     9056.06│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     70│      1000│         0│       437│            30│         1│         1│         1│         2│       175│      7.80│     8972.70│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     80│      1000│         0│       578│            34│         1│         1│         1│         2│       191│      8.86│     9029.26│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     90│      1000│         0│       626│            40│         1│         1│         1│         2│       211│     10.01│     8987.57│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    100│      1000│         0│       790│            46│         1│         1│         1│         2│       248│     11.02│     9078.28│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    200│      1000│         0│      1001│            90│         1│         1│         1│         2│       504│     22.07│     9063.37│
    // └───────┴──────────┴──────────┴──────────┴──────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴────────────┘

    // setup metrics recorder
    enable_simple_recorder().unwrap();

    // number of pings to send per peer
    const PINGS: u16 = 1000;
    const PING_TIMEOUT: Duration = Duration::from_secs(1);
    // number of concurrent peers to test (zcashd hardcaps `max_peers` to 873 on my machine)
    let peer_counts = vec![
        1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, //300, 500, 750, 800,
    ];

    let mut table = RequestsTable::default();

    // start node, with max peers set so that our peers should
    // never be rejected.
    let mut node: Node = Default::default();
    node.initial_action(Action::WaitForConnection)
        .max_peers(peer_counts.iter().max().unwrap() * 2 + 10)
        .start()
        .await;
    let node_addr = node.addr();

    const METRIC_NAME: &str = "ping_perf";

    for peers in peer_counts {
        // clear metrics and register metrics
        simple_metrics::clear();
        metrics::register_histogram!(METRIC_NAME);

        // create N peer nodes which send M ping's as fast as possible
        let mut peer_handles = Vec::with_capacity(peers);

        let test_start = tokio::time::Instant::now();

        for _ in 0..peers {
            peer_handles.push(tokio::spawn(async move {
                // Create a synthetic node, enable handshaking and auto-reply
                let mut peer = SyntheticNode::builder()
                    .with_full_handshake()
                    .with_all_auto_reply()
                    .build()
                    .await
                    .unwrap();
                peer.connect(node_addr).await.unwrap();

                for _ in 0..PINGS {
                    let nonce = Nonce::default();
                    let expected = Message::Pong(nonce);

                    // send Ping(nonce)
                    peer.send_direct_message(node_addr, Message::Ping(nonce))
                        .await
                        .unwrap();

                    let now = tokio::time::Instant::now();
                    loop {
                        match peer.recv_message_timeout(PING_TIMEOUT).await {
                            Err(err) if err.kind() == std::io::ErrorKind::TimedOut => {
                                metrics::histogram!(METRIC_NAME, duration_as_ms(PING_TIMEOUT))
                            }
                            Ok((_, message)) if message == expected => {
                                metrics::histogram!(METRIC_NAME, duration_as_ms(now.elapsed()))
                            }
                            // If the nonce doesn't match then we treat it as a response to an already timed out Ping
                            // (which has already been handled, so we skip it).
                            Ok((_, Message::Pong(_))) => continue,
                            result => {
                                panic!("Failed to receive {:?}, got {:?}", expected, result)
                            }
                        }

                        break;
                    }
                }

                peer.shut_down();
            }));
        }

        // wait for peers to complete
        for handle in peer_handles {
            handle.await.unwrap();
        }

        let time_taken_secs = test_start.elapsed().as_secs_f64();

        // grab latencies from metrics recoder
        let latencies = simple_metrics::histograms()
            .lock()
            .get(&metrics::Key::from_name(METRIC_NAME))
            .unwrap()
            .value
            .clone();

        // add stats to table display
        table.add_row(RequestStats::new(
            peers as u16,
            PINGS,
            latencies,
            time_taken_secs,
        ));
    }

    node.stop().await;

    // Display results table
    println!("{}", table);
}
